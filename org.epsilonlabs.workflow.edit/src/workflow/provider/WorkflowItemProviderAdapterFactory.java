/**
 */
package workflow.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import workflow.util.WorkflowAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowItemProviderAdapterFactory extends WorkflowAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WorkflowItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Workflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowItemProvider workflowItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Workflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowAdapter() {
		if (workflowItemProvider == null) {
			workflowItemProvider = new WorkflowItemProvider(this);
		}

		return workflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Github} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GithubItemProvider githubItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Github}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGithubAdapter() {
		if (githubItemProvider == null) {
			githubItemProvider = new GithubItemProvider(this);
		}

		return githubItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.GithubBigQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GithubBigQueryItemProvider githubBigQueryItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.GithubBigQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGithubBigQueryAdapter() {
		if (githubBigQueryItemProvider == null) {
			githubBigQueryItemProvider = new GithubBigQueryItemProvider(this);
		}

		return githubBigQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.GHTorrent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GHTorrentItemProvider ghTorrentItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.GHTorrent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGHTorrentAdapter() {
		if (ghTorrentItemProvider == null) {
			ghTorrentItemProvider = new GHTorrentItemProvider(this);
		}

		return ghTorrentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Commits} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommitsItemProvider commitsItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Commits}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommitsAdapter() {
		if (commitsItemProvider == null) {
			commitsItemProvider = new CommitsItemProvider(this);
		}

		return commitsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Authors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthorsItemProvider authorsItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Authors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthorsAdapter() {
		if (authorsItemProvider == null) {
			authorsItemProvider = new AuthorsItemProvider(this);
		}

		return authorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.Files} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilesItemProvider filesItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.Files}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilesAdapter() {
		if (filesItemProvider == null) {
			filesItemProvider = new FilesItemProvider(this);
		}

		return filesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DataManipulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataManipulationItemProvider dataManipulationItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DataManipulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataManipulationAdapter() {
		if (dataManipulationItemProvider == null) {
			dataManipulationItemProvider = new DataManipulationItemProvider(this);
		}

		return dataManipulationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DataAggregation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataAggregationItemProvider dataAggregationItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DataAggregation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAggregationAdapter() {
		if (dataAggregationItemProvider == null) {
			dataAggregationItemProvider = new DataAggregationItemProvider(this);
		}

		return dataAggregationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.DataFiltering} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFilteringItemProvider dataFilteringItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.DataFiltering}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFilteringAdapter() {
		if (dataFilteringItemProvider == null) {
			dataFilteringItemProvider = new DataFilteringItemProvider(this);
		}

		return dataFilteringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link workflow.CustomScript} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomScriptItemProvider customScriptItemProvider;

	/**
	 * This creates an adapter for a {@link workflow.CustomScript}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomScriptAdapter() {
		if (customScriptItemProvider == null) {
			customScriptItemProvider = new CustomScriptItemProvider(this);
		}

		return customScriptItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (workflowItemProvider != null) workflowItemProvider.dispose();
		if (githubItemProvider != null) githubItemProvider.dispose();
		if (githubBigQueryItemProvider != null) githubBigQueryItemProvider.dispose();
		if (ghTorrentItemProvider != null) ghTorrentItemProvider.dispose();
		if (commitsItemProvider != null) commitsItemProvider.dispose();
		if (authorsItemProvider != null) authorsItemProvider.dispose();
		if (filesItemProvider != null) filesItemProvider.dispose();
		if (dataManipulationItemProvider != null) dataManipulationItemProvider.dispose();
		if (dataAggregationItemProvider != null) dataAggregationItemProvider.dispose();
		if (dataFilteringItemProvider != null) dataFilteringItemProvider.dispose();
		if (customScriptItemProvider != null) customScriptItemProvider.dispose();
	}

}
